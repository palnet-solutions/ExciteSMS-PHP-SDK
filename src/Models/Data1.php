<?php

declare(strict_types=1);

/*
 * ExcitesmsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ExcitesmsLib\Models;

class Data1 implements \JsonSerializable
{
    /**
     * @var int
     */
    private $currentPage;

    /**
     * @var Data[]
     */
    private $data;

    /**
     * @var string
     */
    private $firstPageUrl;

    /**
     * @var int
     */
    private $from;

    /**
     * @var int
     */
    private $lastPage;

    /**
     * @var string
     */
    private $lastPageUrl;

    /**
     * @var Link[]
     */
    private $links;

    /**
     * @var string|null
     */
    private $nextPageUrl;

    /**
     * @var string
     */
    private $path;

    /**
     * @var int
     */
    private $perPage;

    /**
     * @var string|null
     */
    private $prevPageUrl;

    /**
     * @var int
     */
    private $to;

    /**
     * @var int
     */
    private $total;

    /**
     * @param int $currentPage
     * @param Data[] $data
     * @param string $firstPageUrl
     * @param int $from
     * @param int $lastPage
     * @param string $lastPageUrl
     * @param Link[] $links
     * @param string $path
     * @param int $perPage
     * @param int $to
     * @param int $total
     */
    public function __construct(
        int $currentPage,
        array $data,
        string $firstPageUrl,
        int $from,
        int $lastPage,
        string $lastPageUrl,
        array $links,
        string $path,
        int $perPage,
        int $to,
        int $total
    ) {
        $this->currentPage = $currentPage;
        $this->data = $data;
        $this->firstPageUrl = $firstPageUrl;
        $this->from = $from;
        $this->lastPage = $lastPage;
        $this->lastPageUrl = $lastPageUrl;
        $this->links = $links;
        $this->path = $path;
        $this->perPage = $perPage;
        $this->to = $to;
        $this->total = $total;
    }

    /**
     * Returns Current Page.
     */
    public function getCurrentPage(): int
    {
        return $this->currentPage;
    }

    /**
     * Sets Current Page.
     *
     * @required
     * @maps current_page
     */
    public function setCurrentPage(int $currentPage): void
    {
        $this->currentPage = $currentPage;
    }

    /**
     * Returns Data.
     *
     * @return Data[]
     */
    public function getData(): array
    {
        return $this->data;
    }

    /**
     * Sets Data.
     *
     * @required
     * @maps data
     *
     * @param Data[] $data
     */
    public function setData(array $data): void
    {
        $this->data = $data;
    }

    /**
     * Returns First Page Url.
     */
    public function getFirstPageUrl(): string
    {
        return $this->firstPageUrl;
    }

    /**
     * Sets First Page Url.
     *
     * @required
     * @maps first_page_url
     */
    public function setFirstPageUrl(string $firstPageUrl): void
    {
        $this->firstPageUrl = $firstPageUrl;
    }

    /**
     * Returns From.
     */
    public function getFrom(): int
    {
        return $this->from;
    }

    /**
     * Sets From.
     *
     * @required
     * @maps from
     */
    public function setFrom(int $from): void
    {
        $this->from = $from;
    }

    /**
     * Returns Last Page.
     */
    public function getLastPage(): int
    {
        return $this->lastPage;
    }

    /**
     * Sets Last Page.
     *
     * @required
     * @maps last_page
     */
    public function setLastPage(int $lastPage): void
    {
        $this->lastPage = $lastPage;
    }

    /**
     * Returns Last Page Url.
     */
    public function getLastPageUrl(): string
    {
        return $this->lastPageUrl;
    }

    /**
     * Sets Last Page Url.
     *
     * @required
     * @maps last_page_url
     */
    public function setLastPageUrl(string $lastPageUrl): void
    {
        $this->lastPageUrl = $lastPageUrl;
    }

    /**
     * Returns Links.
     *
     * @return Link[]
     */
    public function getLinks(): array
    {
        return $this->links;
    }

    /**
     * Sets Links.
     *
     * @required
     * @maps links
     *
     * @param Link[] $links
     */
    public function setLinks(array $links): void
    {
        $this->links = $links;
    }

    /**
     * Returns Next Page Url.
     */
    public function getNextPageUrl(): ?string
    {
        return $this->nextPageUrl;
    }

    /**
     * Sets Next Page Url.
     *
     * @maps next_page_url
     */
    public function setNextPageUrl(?string $nextPageUrl): void
    {
        $this->nextPageUrl = $nextPageUrl;
    }

    /**
     * Returns Path.
     */
    public function getPath(): string
    {
        return $this->path;
    }

    /**
     * Sets Path.
     *
     * @required
     * @maps path
     */
    public function setPath(string $path): void
    {
        $this->path = $path;
    }

    /**
     * Returns Per Page.
     */
    public function getPerPage(): int
    {
        return $this->perPage;
    }

    /**
     * Sets Per Page.
     *
     * @required
     * @maps per_page
     */
    public function setPerPage(int $perPage): void
    {
        $this->perPage = $perPage;
    }

    /**
     * Returns Prev Page Url.
     */
    public function getPrevPageUrl(): ?string
    {
        return $this->prevPageUrl;
    }

    /**
     * Sets Prev Page Url.
     *
     * @maps prev_page_url
     */
    public function setPrevPageUrl(?string $prevPageUrl): void
    {
        $this->prevPageUrl = $prevPageUrl;
    }

    /**
     * Returns To.
     */
    public function getTo(): int
    {
        return $this->to;
    }

    /**
     * Sets To.
     *
     * @required
     * @maps to
     */
    public function setTo(int $to): void
    {
        $this->to = $to;
    }

    /**
     * Returns Total.
     */
    public function getTotal(): int
    {
        return $this->total;
    }

    /**
     * Sets Total.
     *
     * @required
     * @maps total
     */
    public function setTotal(int $total): void
    {
        $this->total = $total;
    }

    /**
     * Encode this object to JSON
     *
     * @return mixed
     */
    public function jsonSerialize()
    {
        $json = [];
        $json['current_page']   = $this->currentPage;
        $json['data']           = $this->data;
        $json['first_page_url'] = $this->firstPageUrl;
        $json['from']           = $this->from;
        $json['last_page']      = $this->lastPage;
        $json['last_page_url']  = $this->lastPageUrl;
        $json['links']          = $this->links;
        $json['next_page_url']  = $this->nextPageUrl;
        $json['path']           = $this->path;
        $json['per_page']       = $this->perPage;
        $json['prev_page_url']  = $this->prevPageUrl;
        $json['to']             = $this->to;
        $json['total']          = $this->total;

        return $json;
    }
}
