<?php
/*
 * ExcitesmsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ExcitesmsLib\Tests;

use ExcitesmsLib\Exceptions\ApiException;
use ExcitesmsLib\Exceptions;
use ExcitesmsLib\ApiHelper;
use ExcitesmsLib\Models;
use PHPUnit\Framework\TestCase;

class MiscControllerTest extends TestCase
{
    /**
     * @var \ExcitesmsLib\Controllers\MiscController Controller instance
     */
    protected static $controller;

    /**
     * @var HttpCallBackCatcher Callback
     */
    protected static $httpResponse;

    /**
     * Setup test class
     */
    public static function setUpBeforeClass(): void
    {
        self::$httpResponse = new HttpCallBackCatcher();
        self::$controller = ClientFactory::create(self::$httpResponse)->getMiscController();
    }


    /**
     * Excite SMS SMS API allows you to send and receive SMS messages to and from any country in the world through a REST API. Each message is identified by a unique random ID so that users can always check the status of a message using the given endpoint.
     */
    public function testSendSMS()
    {
        // Parameters for the API call
        $accept = 'application/json';
        $body = TestHelper::getJsonMapper()->mapClass(json_decode(
            '{
  "recipient": "0972150298",
  "sender_id": "ExciteSMS",
  "message": "Welcome"
}'),
            'ExcitesmsLib\Models\\SendSMSRequest'
        );

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->sendSMS($accept, $body);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );

        // Test headers
        $headers = [];
        $headers['Content-Type'] = null ;
        $headers['Date'] = null ;
        $headers['Server'] = null ;
        $headers['X-Powered-By'] = null ;
        $headers['Cache-Control'] = null ;
        $headers['X-RateLimit-Limit'] = null ;
        $headers['X-RateLimit-Remaining'] = null ;
        $headers['Access-Control-Allow-Origin'] = null ;
        $headers['Strict-Transport-Security'] = null ;
        $headers['Vary'] = null ;
        $headers['Upgrade'] = null ;
        $headers['Connection'] = null ;
        $headers['Keep-Alive'] = null ;
        $headers['Transfer-Encoding'] = null ;
        
        $this->assertTrue(
            TestHelper::areHeadersProperSubsetOf($headers, self::$httpResponse->getResponse()->getHeaders(), true),
            "Headers do not match"
        );

        // Test whether the captured response is as we expected
        $this->assertNotNull($result, "Result does not exist");

        $this->assertTrue(
            TestHelper::isJsonObjectProperSubsetOf(
                '{
  "status": "success",
  "message": "Your message was successfully delivered",
' .
                '  "data": {
    "uid": "61536aa9cab81",
    "to": "0972150298",
    "from": "Exci' .
                'teSMS",
    "message": "Welcome",
    "status": "Delivered",
    "cost": "1"
  }' .
                '
}',
                self::$httpResponse->getResponse()->getRawBody(),
                false,
                true,
                false
            ),
            "Response body does not match in keys"
        );
    }

    /**
     * Todo Add description for test testViewAnSMS
     */
    public function testViewAnSMS()
    {
        // Parameters for the API call
        $uid = '614e19186613d';

        // Set callback and perform API call
        $result = null;
        try {
            $result = self::$controller->viewAnSMS($uid);
        } catch (ApiException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            self::$httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );

        // Test headers
        $headers = [];
        $headers['Content-Type'] = null ;
        $headers['Date'] = null ;
        $headers['Server'] = null ;
        $headers['X-Powered-By'] = null ;
        $headers['Cache-Control'] = null ;
        $headers['X-RateLimit-Limit'] = null ;
        $headers['X-RateLimit-Remaining'] = null ;
        $headers['Access-Control-Allow-Origin'] = null ;
        $headers['Strict-Transport-Security'] = null ;
        $headers['Vary'] = null ;
        $headers['Upgrade'] = null ;
        $headers['Connection'] = null ;
        $headers['Keep-Alive'] = null ;
        $headers['Transfer-Encoding'] = null ;
        
        $this->assertTrue(
            TestHelper::areHeadersProperSubsetOf($headers, self::$httpResponse->getResponse()->getHeaders(), true),
            "Headers do not match"
        );

        // Test whether the captured response is as we expected
        $this->assertNotNull($result, "Result does not exist");

        $this->assertTrue(
            TestHelper::isJsonObjectProperSubsetOf(
                '{
  "status": "success",
  "message": null,
  "data": {
    "current_page": 1,
' .
                '    "data": [
      {
        "uid": "6147812b6c15a",
        "to": "0760079611",' .
                '
        "from": "Samafrica",
        "message": "Api test",
        "status": "D' .
                'elivered",
        "cost": "1"
      },
      {
        "uid": "61478ab0a9cff",' .
                '
        "to": "0760079611",
        "from": "Samafrica",
        "message": "Api ' .
                'test",
        "status": "Delivered",
        "cost": "1"
      },
      {
    ' .
                '    "uid": "614f849f28a20",
        "to": "0760079611",
        "from": "ExciteSMS' .
                '",
        "message": "Api test",
        "status": "Delivered",
        "cost": ' .
                '"1"
      },
      {
        "uid": "614f84fa08af9",
        "to": "0972150298",' .
                '
        "from": "ExciteSMS",
        "message": "Api test",
        "status": "D' .
                'elivered",
        "cost": "1"
      }
    ],
    "first_page_url": "https://gat' .
                'eway.excitesms.tech/api/v3/sms?page=1",
    "from": 1,
    "last_page": 1,
    "l' .
                'ast_page_url": "https://gateway.excitesms.tech/api/v3/sms?page=1",
    "links": [
' .
                '      {
        "url": null,
        "label": "pagination.previous",
        "act' .
                'ive": false
      },
      {
        "url": "https://gateway.excitesms.tech/api/v' .
                '3/sms?page=1",
        "label": "1",
        "active": true
      },
      {
  ' .
                '      "url": null,
        "label": "pagination.next",
        "active": false
  ' .
                '    }
    ],
    "next_page_url": null,
    "path": "https://gateway.excitesms.te' .
                'ch/api/v3/sms",
    "per_page": 25,
    "prev_page_url": null,
    "to": 4,
    ' .
                '"total": 4
  }
}',
                self::$httpResponse->getResponse()->getRawBody(),
                false,
                true,
                false
            ),
            "Response body does not match in keys"
        );
    }
}
